<section class="hero has-background-grey">
  <div class="hero-body">
    <div class="columns">
      <div class="column is-one-fifth">
        <h1 class="title is-3 has-text-centered has-text-white">
          User Search
        </h1>
      </div>
      <div class="column is-1"></div>
      <div class="column is-4">
        <div class="field">
          <div class="control has-icons-left">
            <input class="input has-background-white" id="user-searchBar" type="search">
            <span class="icon is-left">
                <i class="fas fa-search"></i>
              </span>
          </div>
        </div>
      </div>
      <div class="column">
        <button class="button is-link has-text-white" id="user-searchBtn">Search</button>
      </div>
    </div>
  </div>
</section>

<section class="section">
  <div class="columns is-multiline">
    <div class="column is-2-fullhd is-2-desktop is-3-tablet is-12-mobile">
    </div>
    <div class="column is-10-fullhd is-7-desktop is-3-tablet is-12-mobile">
      <div id="user-searchResults"></div>
    </div>
  </div>
</section>

<script>
  /**
   * @param {Event} evt
   * @param {String} tabName
   * @param {String} filterName
   */
  function selectDateFilter(evt, tabName, filterName) {
    // Declare all variables
    let i, tabs;
    //Change variable to updated or selected.
    // Get all elements with class="tabs" and remove the class "active"
    tabs = document.getElementsByClassName(filterName);
    for (i = 0; i < tabs.length; i++) {
      tabs[i].className = tabs[i].className.replace(' is-active', '');
    }
    // Show the current tab, and add an "active" class to the button that opened the tab
    evt.currentTarget.className += ' is-active';
    if (tabs[0].classList.contains('time')) {
      time = evt.currentTarget.id.toString();
    } else if (tabs[0].classList.contains('rating')) {
      rating = evt.currentTarget.id.toString();
    }
  }

  function resetFilters() {
    tabs = document.getElementsByClassName('filter');
    for (i = 0; i < tabs.length; i++) {
      tabs[i].className = tabs[i].className.replace(' is-active', '');
    }
    rating = null;
    time = null;
  }

  (function() {
    let date, rating, time;
    date = 'created';
    rating = null;
    time = null;
    let today = new Date();
    let dd = today.getDate();
    let mm = today.getMonth() + 1;
    let yyyy = today.getFullYear();
    const searchBtn = document.getElementById('user-searchBtn');
    if (!searchBtn) return;

    searchBtn.onclick = (event) => {
      document.getElementById('user-searchResults').innerHTML = "";
      // don't send the HTML form
      event.preventDefault();
      const searchTerm = document.getElementById('user-searchBar').value;
      const queryParams = {name: searchTerm};
      const cfg = {
        redirect: 'follow',
        cache: 'no-cache',
        mode: 'cors',
        credentials: 'include',
        headers: {Accept: 'application/json'},
      };
      let uri = `/api/user/search`;

      if ([...Object.keys(queryParams)].length > 0) {
        uri += '?' + Object.entries(queryParams).map(pair => pair.join('=')).join('&');
      }
      // error codes 400..499 and 500..599 are client and server errors
      return fetch(uri, cfg)
        .then(response => response.status >= 400
            // if it goes wrong force it to jump to reject
            ? response.json().then(errMsg => Promise.reject(errMsg))
            // the JSON object is guaranteed to have a "msg" property
            : response.json())
        .then(json => {
          //Display results
          if (rating === null && time === null) {
            for (user in json.result) {
              console.log("not here");
              const userName = json.result[user].name;
              document.getElementById('user-searchResults').innerHTML +=
                  `<div class="box" onclick="location.href = "/user">
              <div class="media-content">
                <div class="content">
                  <p class="is-size-5">
                    <a href="user/"><strong>${userName}</strong></a>
                    <br>
                  </p>
                </div>
              </div>
              <br>
              <i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="far fa-star"></i>
            </div>`;
            }
          }
        })
      .catch(err => {
        console.error(err);
        return alert(err.msg || err.message || err.toString());
      });
    };
  })();
</script>
