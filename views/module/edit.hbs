<div class="has-background-white"
     style="padding: 50px 0 20px; display: flex; flex-direction: column; justify-content: center; align-items: center;">
  <a href="/user/home"
     class="button is-light"
     style="max-width: 100px; align-self: flex-start; margin-left: 10vw; position: relative; top: 11px;">
    <i class="fas fa-arrow-left"></i>
    Home
  </a>
  <h1 class="title is-1 has-text-centered" style="margin: 0 15px 0 0; position: relative; bottom: 30px;">
    Modify
  </h1>
</div>

<!--3-column layout: list, list, editing -->
<div class="columns is-centered is-multiline" style="margin-top: 30px;">

  <div class="column is-narrow-desktop is-2-desktop is-5-tablet is-11-mobile"
       style="margin-left: 30px; display: flex; flex-direction: column; justify-content: flex-start; align-items: stretch;">

    <h2 class="title has-text-centered" style="margin-bottom: 10px;">
      Modules
    </h2>
    <!--list of modules-->
    <ul id="module-edit-module-list" class="menu-list" style="margin-top: 20px; margin-bottom: 20px;"></ul>
    <button class="button is-success" style="display: block; max-width: 150px; margin: 0 auto;"
            onclick="create('Module', JSON.stringify({authorId: {{loggedIn.id}} })).then(m => appendModule(m))">
      <i class="fas fa-plus" style="position: relative; top: 3px;"></i>
      Module
    </button>
  </div>

  <div class="column is-narrow-desktop is-2-desktop is-5-tablet is-11-mobile" style="margin-left: 30px;">

    <h2 class="title has-text-centered" style="margin-bottom: 20px;">
      Lessons
    </h2>

    <!--list of lessons-->
    <ol id="module-edit-lesson-list" class="menu-list" style="margin-bottom: 20px; list-style-type: none;"></ol>

    <!--create lesson btn-->
    <button onclick="create('Lesson', JSON.stringify({moduleId: getSelModId()})).then(l => appendLesson(l))"
            class="button is-success" style="margin: 0 auto; display: block; max-width: 150px;">
      <i class="fas fa-plus" style="position: relative; top: 3px;"></i>
      Lesson
    </button>

    <br>

    <h2 class="title has-text-centered" style="margin: 35px 0 20px;">
      Quiz
    </h2>

    <!--quiz edit (list of questions)-->
    <ol id="module-edit-question-list" style="list-style-type: none;"></ol>

    <!--add question btn-->
    <button id="module-edit-btn-quiz" class="button is-success"
            onclick="create('Question', JSON.stringify({moduleId: getSelModId()})).then(q => appendQuestion(q))"
            style="margin: 10px auto 0; display: block; max-width: 150px;">
      <i class="fas fa-plus" style="position: relative; top: 3px;"></i>
      Question
    </button>
  </div>

  <!--right side of the screen-->
  <!--only one of the divs inside can be visible-->
  <div id="module-edit-pane" class="column is-7-desktop is-10-tablet is-11-mobile"></div>
</div>

<!--Must be loaded synchronously, defines functions to be called later-->
<script src="/javascripts/module/edit.js"></script>

<!--Populate the page using AJAX-->
<script>
  (async function() {

    const authorId = {{loggedIn.id}};
    try {
      const modules = await get('Module', {authorId});
      for (const m of modules) appendModule(m);
    } catch (e) {
      const msg = e.msg || e.message || e.toLocaleString();
      console.error(e);
      alert(msg);
    }

    async function tryRecallMod() {
      const maybeModuleId = sessionStorage.getItem('/module/edit?moduleId');
      if (!(maybeModuleId && maybeModuleId.match(/^\d+$/))) {
        // fallback to expanding the first module
        document.querySelector('#module-edit-module-list > li[data-id]:first-of-type > a').dispatchEvent(new Event('click'));
        return false;
      }
      const maybeModEl = document.querySelector(`#module-edit-module-list li[data-id='${maybeModuleId}'] > a`);
      if (!maybeModEl) return false;
      await toggleModule(eval(maybeModuleId));
      return true;
    }
    async function tryRecallLess() {
      const maybeLessId = sessionStorage.getItem('/module/edit?lessonId');
      if (!maybeLessId || !maybeLessId.match(/^\d+$/)) return false;
      const maybeLessEl = document.querySelector(`#module-edit-lesson-list li[data-id='${maybeLessId}'] > a`);
      if (!maybeLessEl) return false;
      await toggleLesson(eval(maybeLessId));
      return true;
    }
    async function tryRecallQuest() {
      /** Try to recall last expanded module */
      const maybeQuestId = sessionStorage.getItem('/module/edit?questionId');
      if (!maybeQuestId || !maybeQuestId.match(/^\d+$/)) return false;
      const maybeQuestEl = document.querySelector(`#module-edit-question-list li[data-id='${maybeQuestId}'] > a`);
      if (!maybeQuestEl) return false;
      await toggleQuestion(eval(maybeQuestId));
      return true;
    }
    return tryRecallMod().then(ok => ok && tryRecallLess().then(ok2 => ok2 || tryRecallQuest()));
  })();

</script>
